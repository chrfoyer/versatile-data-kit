# Copyright 2021-2023 VMware, Inc.
# SPDX-License-Identifier: Apache-2.0
from threading import Event
from typing import Optional

import pytest
from vdk.api.job_input import IIngester
from vdk.internal.builtin_plugins.ingestion.source.auto_generated import (
    AutoGeneratedDataSource,
)
from vdk.internal.builtin_plugins.ingestion.source.auto_generated import (
    AutoGeneratedDataSourceConfiguration,
)
from vdk.internal.builtin_plugins.ingestion.source.ingester import DataSourceIngester
from vdk.internal.builtin_plugins.ingestion.source.state import InMemoryDataSourceState


class MockIngester(IIngester):
    def __init__(self):
        self.ingested_data = []

    def send_object_for_ingestion(
        self,
        payload: dict,
        destination_table: Optional[str],
        method: Optional[str],
        target: Optional[str],
        collection_id: Optional[str] = None,
    ):
        self.ingested_data.append(payload)

    def send_tabular_data_for_ingestion(
        self,
        rows: iter,
        column_names: list,
        destination_table: Optional[str],
        method: Optional[str],
        target: Optional[str],
        collection_id: Optional[str] = None,
    ):
        raise NotImplemented("send_tabular_data_for_ingestion")


@pytest.mark.parametrize("num_records, num_streams", [(5, 2), (10, 1)])
def test_data_source_ingester(num_records, num_streams):
    # Arrange
    data_source, data_source_ingester, ingester = arrange(num_records, num_streams)

    # Act
    data_source_ingester.ingest_data_source(data_source)
    data_source_ingester.ingest_data_source(data_source)  # should be ignored
    data_source_ingester.terminate_and_wait_to_finish()

    # Assert
    assert num_records * num_streams == len(ingester.ingested_data)


@pytest.mark.parametrize("num_records, num_streams", [(5, 2), (10, 1)])
def test_data_source_ingester_with_two_sources(num_records, num_streams):
    # Arrange
    data_source, data_source_ingester, mock_actual_ingester = arrange(
        num_records, num_streams
    )

    # Act
    data_source_ingester.ingest_data_source(data_source)
    data_source_ingester.ingest_data_source(data_source, method="second_method")
    data_source_ingester.terminate_and_wait_to_finish()

    # Assert
    assert num_records * num_streams * 2 == len(mock_actual_ingester.ingested_data)


def arrange(num_records, num_streams):
    mock_actual_ingester = MockIngester()
    data_source_ingester = DataSourceIngester(mock_actual_ingester)
    data_source = get_data_source(num_records, num_streams)
    return data_source, data_source_ingester, mock_actual_ingester


def get_data_source(num_records, num_streams):
    config = AutoGeneratedDataSourceConfiguration(
        num_records=num_records, include_metadata=False, num_streams=num_streams
    )
    data_source = AutoGeneratedDataSource()
    data_source.connect(config, InMemoryDataSourceState())
    return data_source
